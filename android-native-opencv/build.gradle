apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"
apply plugin: "com.diffplug.spotless"
apply plugin: "maven-publish"

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.0"

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 29
        versionCode project.property("version_code").toInteger()
        versionName project.property("version_name") as String

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                abiFilters "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
                arguments "-DOpenCV_DIR=" + projectDir + "/../opencv/native"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:1.3.0"
    implementation project(path: ":opencv")
    testImplementation "junit:junit:4.13"
}

spotless {
    kotlin {
        target "**/*.kt"
        // EditorConfig support is broken: https://github.com/diffplug/spotless/issues/142
        ktlint("0.35.0").userData(["disabled_rules": "no-wildcard-imports,import-ordering,chain-wrapping"])
    }
}

task sourceJar(type: Jar) {
    from android.sourceSets.main.kotlin.srcDirs
    from android.sourceSets.main.java.srcDirs
    from fileTree(dir: 'src/libs', include: ['*.jar'])
    classifier "sources"
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                // Applies the component for the release build variant.
                from components.release

                // Adds javadocs and sources as separate jars.
                // artifact androidJavadocsJar
                artifact androidSourcesJar

                groupId 'net.kuama.android'
                artifactId 'opencv'
                version project.property('version_name')
            }
        }
    }
}
